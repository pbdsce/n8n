{
  "nodes": [
    {
      "parameters": {
        "promptType": "define",
        "text": "=Current date: {{ $now }}\n\n**IMPORTANT: Use ONLY the achievement data provided below. Do NOT create fictional achievements.**\n\nAchievement Data to Process:\n{{ $json.readableAchievements }}\n\nInstructions:\n1. Parse the JSON data above\n2. For each item (item_1, item_2, etc.), extract:\n   - Name: Use the \"name\" field\n   - Achievement: Use the \"title\" field\n   - Date: Use the \"date\" field\n3. Filter to show only achievements from the last 5 months based on the current date\n4. Group by month in reverse chronological order\n5. Format as HTML email with:\n   - Subject: \"Team Achievements – [Month Range]\"\n   - Greeting: \"Hi Team,\"\n   - Intro paragraph about last 5 months' achievements\n   - Each achievement formatted as: **[Name]**: [Achievement Title] (Date: [Date])\n   - Motivational closing\n   - Signature: \"The Dark Knight\"\n\n**CRITICAL: If no achievements exist for a month, state \"No specific achievements recorded for this month.\" Do NOT invent achievements.**\n\nOutput format: Clean HTML email ready for automation system.\n\nAnd if the data is coming for modifying read the below data dont go \nfor the above prompts and modify the below according to this{{ $json.data }}\nthis is the body the changes need to be applied\n{{ $json.readableAchievements }}\n\n",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        1120,
        -64
      ],
      "id": "a2e03c49-3a41-4998-8427-341f1262b980",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1120,
        112
      ],
      "id": "b8cca711-6d63-4278-a36f-73c4856e03ea",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "fb6o9Q1SHyuqJYMA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "documentURL": "https://docs.google.com/document/d/1mHCIObNvJE0lYVtFJ8s3CwPr9atck5JZXwdKPa55de0/edit?tab=t.0#heading=h.vqzqd8n0offo"
      },
      "type": "n8n-nodes-base.googleDocsTool",
      "typeVersion": 2,
      "position": [
        1280,
        112
      ],
      "id": "04bb1ccb-6770-412b-bac7-0ef239638432",
      "name": "Get a document in Google Docs",
      "credentials": {
        "googleDocsOAuth2Api": {
          "id": "Io7mL3UKwXHKR3L7",
          "name": "Google Docs account"
        }
      },
      "disabled": true
    },
    {
      "parameters": {
        "sendTo": "ayushayush9415272949@gmail.com",
        "subject": "=Monthly Update",
        "message": "={{ $json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        2336,
        -16
      ],
      "id": "d0ed231a-ec00-432b-8122-da294f9c490f",
      "name": "Send a message",
      "webhookId": "6770a14e-ad27-4e9f-a6d0-0fc0acef2752",
      "credentials": {
        "gmailOAuth2": {
          "id": "INDmyXIMGaPnpDnL",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Calendar', ``, 'string') }}",
          "mode": "id",
          "__regex": "(^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*)"
        },
        "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
        "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
        "useDefaultReminders": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Use_Default_Reminders', ``, 'boolean') }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.googleCalendarTool",
      "typeVersion": 1.3,
      "position": [
        1408,
        144
      ],
      "id": "13eb2365-afb0-413b-945c-aa05cb9a32cf",
      "name": "Create an event in Google Calendar",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "TQ4nEvzfg1aQ6m9G",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "path": "f60944a9-8567-4d04-b452-2c9bb58f6f31",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        1216,
        -704
      ],
      "id": "43f4ca26-df5e-4c92-a289-d66125144be8",
      "name": "Webhook",
      "webhookId": "f60944a9-8567-4d04-b452-2c9bb58f6f31"
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMonth"
            }
          ]
        },
        "documentId": {
          "__rl": true,
          "value": "12Gl-LE-uxfONjGh9M-bPEH-subo5FEIuDViC2ea93d8",
          "mode": "list",
          "cachedResultName": "n8n test",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/12Gl-LE-uxfONjGh9M-bPEH-subo5FEIuDViC2ea93d8/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/12Gl-LE-uxfONjGh9M-bPEH-subo5FEIuDViC2ea93d8/edit#gid=0"
        },
        "event": "rowAdded",
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 1,
      "position": [
        432,
        -64
      ],
      "id": "dc5524e2-57d9-446c-89cb-682ced44ecac",
      "name": "Google Sheets Trigger",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "jz0XIGLnsUxBUviD",
          "name": "Google Sheets Trigger account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const now = new Date(\"2025-09-05\"); // Current date: September 5, 2025\nconsole.log(\"Current date:\", now.toISOString()); // Debug: Log current date\n\n// Debug: Log input from $input.all()\nlet input;\ntry {\n  input = $input.all();\n  console.log(\"Input from $input.all():\", JSON.stringify(input, null, 2));\n  console.log(\"Input type:\", typeof input, \"Is array:\", Array.isArray(input), \"Length:\", input ? input.length : \"undefined\");\n} catch (e) {\n  console.log(\"Error accessing $input.all():\", e.message);\n  return [{ json: { error: \"Failed to access $input.all()\", details: e.message } }];\n}\n\n// Check if input is valid\nif (!input || !Array.isArray(input) || input.length === 0) {\n  console.log(\"Error: Invalid or empty input from $input.all()\", input);\n  return [{ json: { error: \"Invalid or empty input\", input: input ? JSON.stringify(input) : \"undefined\" } }];\n}\n\nconst processedItems = input.map((item, index) => {\n  // Debug: Log each item\n  console.log(`Processing item ${index}:`, JSON.stringify(item, null, 2));\n  \n  // Check if item and item.json exist\n  if (!item || !item.json) {\n    console.log(`Error: Missing item or item.json at index ${index}`, item);\n    return { error: \"Missing item or json object\", index };\n  }\n  \n  const rawDate = item.json.What_is_the_date_of_achievement; // Access date field\n  console.log(`Raw date for item ${index}:`, rawDate);\n  \n  let passed = false;\n  let achievementDate;\n  \n  // Check if rawDate exists\n  if (!rawDate) {\n    console.log(`Error: Missing What_is_the_date_of_achievement for item ${index}:`, item.json);\n    return { ...item.json, error: \"Missing date\", passed, now: now.toISOString() };\n  }\n  \n  // Handle date formats\n  if (/^\\d{4}$/.test(rawDate.toString())) {\n    // Year-only (e.g., \"2025\" -> \"2025-01-01\")\n    achievementDate = new Date(`${rawDate}-01-01`);\n  } else if (/^\\d{4}-\\d{2}$/.test(rawDate)) {\n    // Year-month (e.g., \"2025-05\" -> \"2025-05-01\")\n    achievementDate = new Date(`${rawDate}-01`);\n  } else {\n    // Full date (e.g., \"2025-09-05\")\n    achievementDate = new Date(rawDate);\n  }\n  \n  console.log(`Parsed date for item ${index}:`, achievementDate.toString());\n  \n  // Check if the date is valid\n  if (!isNaN(achievementDate.getTime())) {\n    // Calculate month difference\n    const diffMonths =\n      (now.getFullYear() - achievementDate.getFullYear()) * 12 +\n      (now.getMonth() - achievementDate.getMonth());\n    \n    // Event is within 5 months and not in the future\n    passed = diffMonths <= 5 && achievementDate <= now;\n    console.log(`Months diff for item ${index}:`, diffMonths, \"Passed:\", passed);\n  } else {\n    console.log(`Error: Invalid date for item ${index}:`, rawDate);\n  }\n  \n  // Return the processed item\n  return { ...item.json, passed, now: now.toISOString() };\n}).filter(item => item.passed); // Filter only events where passed is true\n\nconsole.log(\"Filtered items:\", JSON.stringify(processedItems, null, 2)); // Debug: Log filtered items\n\n// Create single object with all achievements inside achievement_1\nconst allAchievements = {};\n\nprocessedItems.forEach((item, index) => {\n  allAchievements[`item_${index + 1}`] = {\n    name: item.Name,\n    title: item.What_is_the_Achievement,\n    date: item.What_is_the_date_of_achievement\n  };\n});\n\nconsole.log(\"Total achievements:\", Object.keys(allAchievements).length);\n\n// Return single JSON block with everything under achievement_1\nconst result = [\n  {\n    json: {\n      achievement_1: allAchievements\n    }\n  }\n];\n\nconsole.log(\"Final result:\", JSON.stringify(result, null, 2)); // Debug: Log final result\nreturn result;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        -64
      ],
      "id": "9feaca6b-8eaf-477a-8218-de5ea6f636f0",
      "name": "Code"
    },
    {
      "parameters": {
        "jsCode": "// Convert achievement_1 object to readable JSON string\nconst readableData = JSON.stringify($json.achievement_1, null, 2);\nreturn { readableAchievements: readableData };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        -64
      ],
      "id": "a9e71672-827a-4811-8884-03519a55e06b",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "ayushayush9415272949@gmail.com",
        "subject": "Approval for Monthly updates",
        "message": "={{ $json.output }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Mail accepted or not?",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "Improvise"
                  },
                  {
                    "option": "Retreat"
                  }
                ]
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1472,
        -64
      ],
      "id": "9d4fbc5f-37a7-493a-824b-a3dcffea7a98",
      "name": "Send message and wait for response",
      "webhookId": "3931773d-92f2-4b29-a675-321415c3a363",
      "credentials": {
        "gmailOAuth2": {
          "id": "INDmyXIMGaPnpDnL",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "411fb292-0b3b-4e6a-bb69-18fb33ff1247",
              "leftValue": "={{ $json.data['Mail accepted or not?'] }}",
              "rightValue": "Yes",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1680,
        -64
      ],
      "id": "debc16fb-1c99-4954-8789-926de6242101",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "411fb292-0b3b-4e6a-bb69-18fb33ff1247",
              "leftValue": "={{ $json.data['Mail accepted or not?'] }}",
              "rightValue": "Improvise",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1888,
        160
      ],
      "id": "28d480d6-a59c-49fb-bbb8-2690ec939437",
      "name": "If1"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "ayushayush9415272949@gmail.com",
        "subject": "What improvisation needed?",
        "message": "=Add improvisation points required in the post:\n {{ $('AI Agent').item.json.output }}",
        "responseType": "freeText",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1008,
        -320
      ],
      "id": "68daa734-b5f2-4525-947d-4bc1c823aebf",
      "name": "Send message and wait for response1",
      "webhookId": "9dfdb045-9c07-4059-b701-0502510935fd",
      "credentials": {
        "gmailOAuth2": {
          "id": "INDmyXIMGaPnpDnL",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Improvise the following mail according to he prompt below\n\n {{ $json.data.text }}\n\nand the mail is\n\n{{ $('AI Agent').item.json.output }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1264,
        -416
      ],
      "id": "0622d289-f505-4119-95c5-12bab2e0177c",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1216,
        -224
      ],
      "id": "3d74b2f8-1611-4824-8d34-fdd2841a3977",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "fa5z3alVNE2b4iZP",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "ayushayush9415272949@gmail.com",
        "subject": "Approval for Monthly updates",
        "message": "={{ $json.output }}",
        "responseType": "customForm",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Mail accepted or not?",
              "fieldType": "dropdown",
              "fieldOptions": {
                "values": [
                  {
                    "option": "Yes"
                  },
                  {
                    "option": "Improvise"
                  },
                  {
                    "option": "Retreat"
                  }
                ]
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1568,
        -272
      ],
      "id": "cfea795d-4f49-4f5c-970a-42e021159dcd",
      "name": "Send message and wait for response2",
      "webhookId": "3931773d-92f2-4b29-a675-321415c3a363",
      "credentials": {
        "gmailOAuth2": {
          "id": "INDmyXIMGaPnpDnL",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "411fb292-0b3b-4e6a-bb69-18fb33ff1247",
              "leftValue": "={{ $json.data['Mail accepted or not?'] }}",
              "rightValue": "Yes",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        528,
        -544
      ],
      "id": "8ac36324-558a-4d31-8e2d-64157313098f",
      "name": "If2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "411fb292-0b3b-4e6a-bb69-18fb33ff1247",
              "leftValue": "={{ $json.data['Mail accepted or not?'] }}",
              "rightValue": "Improvise",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        784,
        -528
      ],
      "id": "b4f7ad97-621d-4090-ae31-a7a2868101cf",
      "name": "If3"
    },
    {
      "parameters": {
        "operation": "sendAndWait",
        "sendTo": "ayushayush9415272949@gmail.com",
        "subject": "What improvisation needed?",
        "message": "=Add improvisation points required in the post:\n {{ $('AI Agent').item.json.output }}",
        "responseType": "freeText",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1024,
        -528
      ],
      "id": "0ee55efa-0aea-4209-ad45-57ef5c9f7d72",
      "name": "Send message and wait for response3",
      "webhookId": "9dfdb045-9c07-4059-b701-0502510935fd",
      "credentials": {
        "gmailOAuth2": {
          "id": "INDmyXIMGaPnpDnL",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "ayushayush9415272949@gmail.com",
        "subject": "=Monthly Update",
        "message": "={{ $('AI Agent1').item.json.output }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        800,
        -704
      ],
      "id": "18af687e-4a39-49ba-8c69-258160937881",
      "name": "Send a message1",
      "webhookId": "6770a14e-ad27-4e9f-a6d0-0fc0acef2752",
      "credentials": {
        "gmailOAuth2": {
          "id": "INDmyXIMGaPnpDnL",
          "name": "Gmail account"
        }
      }
    }
  ],
  "connections": {
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send message and wait for response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Get a document in Google Docs": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Create an event in Google Calendar": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Send a message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Send message and wait for response1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Send message and wait for response2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response2": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Send a message1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Send message and wait for response3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send message and wait for response3": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3756fcbdbf32737563a07d81f0c37f2b4db5c631b20a1fc24dd909f887863ac6"
  }
}
